// === FormRepository.java ===
package com.yourproject.repository;

import com.yourproject.model.Form;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface FormRepository extends MongoRepository<Form, String> {
}

// === ResponseRepository.java ===
package com.yourproject.repository;

import com.yourproject.model.Response;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface ResponseRepository extends MongoRepository<Response, String> {
    Optional<Response> findByFormIdAndUserId(String formId, String userId);
}

// === Response.java ===
package com.yourproject.model;

import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.Map;

@Data
@Document(collection = "responses")
public class Response {
    @Id
    private String id;
    private String formId;
    private String userId;
    private Map<String, Object> answers;
}

// === Updated UserController.java ===
package com.yourproject.controller;

import com.yourproject.model.Form;
import com.yourproject.model.Response;
import com.yourproject.repository.FormRepository;
import com.yourproject.repository.ResponseRepository;
import lombok.Data;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/user")
public class UserController {

    @Autowired
    private FormRepository formRepo;

    @Autowired
    private ResponseRepository responseRepo;

    // Get assigned forms
    @GetMapping("/forms/assigned")
    public List<Form> getAssignedForms(Principal principal) {
        String employeeId = principal.getName();
        return formRepo.findAll().stream()
                .filter(f -> f.getTargetUserIds().contains(employeeId))
                .collect(Collectors.toList());
    }

    // Submit or update response
    @PostMapping("/forms/{formId}/submit")
    public ResponseEntity<?> submitResponse(@PathVariable String formId, @RequestBody SubmitRequest req, Principal principal) {
        String employeeId = principal.getName();
        Optional<Form> optionalForm = formRepo.findById(formId);
        if (optionalForm.isEmpty()) return ResponseEntity.notFound().build();

        Response response = responseRepo.findByFormIdAndUserId(formId, employeeId).orElse(new Response());
        response.setFormId(formId);
        response.setUserId(employeeId);
        response.setAnswers(req.getAnswers());

        responseRepo.save(response);
        return ResponseEntity.ok("Response submitted successfully");
    }

    // Check if user already submitted response for the form
    @GetMapping("/forms/{formId}/submitted")
    public boolean isFormSubmitted(@PathVariable String formId, Principal principal) {
        String employeeId = principal.getName();
        return responseRepo.findByFormIdAndUserId(formId, employeeId).isPresent();
    }

    @Data
    public static class SubmitRequest {
        private Map<String, Object> answers;
    }
}

// === AssignedForms.jsx ===
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import API from '../api/api.js';

export default function AssignedForms() {
  const [forms, setForms] = useState([]);
  const [submittedForms, setSubmittedForms] = useState([]);
  const nav = useNavigate();

  useEffect(() => {
    API.get('/api/user/forms/assigned')
      .then(async res => {
        const assigned = res.data;
        const submitted = await Promise.all(
          assigned.map(async form => {
            const check = await API.get(`/api/user/forms/${form.id}/submitted`);
            return check.data ? form.id : null;
          })
        );
        setForms(assigned);
        setSubmittedForms(submitted.filter(Boolean));
      })
      .catch(console.error);
  }, []);

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-blue-900 text-white px-6 py-4 shadow-md flex items-center gap-4">
        <img src="/assets/coforge-logo.png" alt="Coforge" className="h-10" />
        <h1 className="text-xl font-bold">Assigned Feedback Forms</h1>
      </header>

      <main className="p-8 max-w-3xl mx-auto">
        <h2 className="text-2xl font-semibold mb-4 text-blue-900">Your Assigned Forms</h2>
        <ul className="space-y-3">
          {forms.map(f => (
            <li key={f.id} className="bg-white p-4 shadow rounded flex justify-between items-center">
              <span>{f.title}</span>
              {submittedForms.includes(f.id) ? (
                <span className="text-green-600 font-semibold">âœ” Submitted</span>
              ) : (
                <button
                  onClick={() => nav(`/user/fill/${f.id}`)}
                  className="text-blue-700 underline hover:text-blue-900"
                >
                  Fill Now
                </button>
              )}
            </li>
          ))}
        </ul>
      </main>
    </div>
  );
}
