// === FormRepository.java ===
package com.yourproject.repository;

import com.yourproject.model.Form;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface FormRepository extends MongoRepository<Form, String> {
}

// === ResponseRepository.java ===
package com.yourproject.repository;

import com.yourproject.model.Response;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface ResponseRepository extends MongoRepository<Response, String> {
    Optional<Response> findByFormIdAndUserId(String formId, String userId);
}

// === Response.java ===
package com.yourproject.model;

import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.List;

@Data
@Document(collection = "responses")
public class Response {
    @Id
    private String id;
    private String formId;
    private String userId;
    private List<Answer> answers;
}

// === Answer.java ===
package com.yourproject.model;

import lombok.Data;

@Data
public class Answer {
    private String questionId;
    private Object response;
}

// === Updated UserController.java ===
package com.yourproject.controller;

import com.yourproject.model.Answer;
import com.yourproject.model.Form;
import com.yourproject.model.Response;
import com.yourproject.repository.FormRepository;
import com.yourproject.repository.ResponseRepository;
import lombok.Data;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/user")
public class UserController {

    @Autowired
    private FormRepository formRepo;

    @Autowired
    private ResponseRepository responseRepo;

    // Get assigned forms
    @GetMapping("/forms/assigned")
    public ResponseEntity<List<Form>> getAssignedForms(Authentication authentication) {
        String employeeId = authentication.getName();
        List<Form> forms = formRepo.findAll().stream()
            .filter(f -> f.getTargetUserIds() != null && f.getTargetUserIds().contains(employeeId))
            .collect(Collectors.toList());

        return ResponseEntity.ok(forms);
    }

    // Submit or update response
    @PostMapping("/forms/{formId}/submit")
    public ResponseEntity<?> submitResponse(@PathVariable String formId, @RequestBody SubmitRequest req, Authentication authentication) {
        String employeeId = authentication.getName();
        Optional<Form> optionalForm = formRepo.findById(formId);
        if (optionalForm.isEmpty()) return ResponseEntity.notFound().build();

        Response response = responseRepo.findByFormIdAndUserId(formId, employeeId).orElse(new Response());
        response.setFormId(formId);
        response.setUserId(employeeId);
        response.setAnswers(req.getAnswers());

        responseRepo.save(response);
        return ResponseEntity.ok("Response submitted successfully");
    }

    // Check if user already submitted response for the form
    @GetMapping("/forms/{formId}/submitted")
    public ResponseEntity<Boolean> isFormSubmitted(@PathVariable String formId, Authentication authentication) {
        String employeeId = authentication.getName();
        boolean submitted = responseRepo.findByFormIdAndUserId(formId, employeeId).isPresent();
        return ResponseEntity.ok(submitted);
    }

    @Data
    public static class SubmitRequest {
        private List<Answer> answers;
    }
}
